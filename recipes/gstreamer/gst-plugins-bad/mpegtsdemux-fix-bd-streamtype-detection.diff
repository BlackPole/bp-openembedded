--- gst-plugins-bad-0.10.20-org/gst/mpegdemux/gstmpegtsdemux.c	2010-12-24 10:51:18.592735708 +0100
+++ gst-plugins-bad-0.10.20/gst/mpegdemux/gstmpegtsdemux.c	2010-12-24 11:39:52.360746518 +0100
@@ -612,6 +612,18 @@
 }
 
 static gboolean
+gst_mpeg_desc_reg_format_id_in_array(GArray *array, guint32 identifier)
+{
+  guint i = 0;
+  for (; i < array->len; ++i) {
+    guint8 *desc = g_array_index(array, guint8*, i);
+    if (DESC_REGISTRATION_format_identifier (desc) == identifier)
+      return TRUE;
+  }
+  return FALSE;
+}
+
+static gboolean
 gst_mpegts_demux_fill_stream (GstMpegTSStream * stream, guint8 id,
     guint8 stream_type)
 {
@@ -620,6 +632,8 @@
   GstMpegTSDemuxClass *klass;
   GstMpegTSDemux *demux;
   GstCaps *caps;
+  GArray *stream_desc_reg_array = NULL;
+  gboolean is_hdmv = FALSE;
 
   if (stream->stream_type && stream->stream_type != stream_type)
     goto wrong_type;
@@ -631,6 +645,31 @@
   template = NULL;
   caps = NULL;
 
+  if (stream->ES_info) {
+    stream_desc_reg_array =
+      gst_mpeg_descriptor_find_all (stream->ES_info, DESC_REGISTRATION);
+    if (stream_desc_reg_array &&
+        gst_mpeg_desc_reg_format_id_in_array(stream_desc_reg_array, DRF_ID_HDMV)) {
+      is_hdmv = TRUE;
+    }
+  }
+
+  if (!is_hdmv) {
+    GstMpegTSStream *PMT_stream =
+      gst_mpegts_demux_get_stream_for_PID (stream->demux, stream->PMT_pid);
+    GstMPEGDescriptor *program_info = PMT_stream->PMT.program_info;
+    if (program_info) {
+      GArray *program_desc_reg_array =
+        gst_mpeg_descriptor_find_all (program_info, DESC_REGISTRATION);
+      if (program_desc_reg_array) {
+        if (gst_mpeg_desc_reg_format_id_in_array(program_desc_reg_array, DRF_ID_HDMV)) {
+          is_hdmv = TRUE;
+        }
+        g_array_free(program_desc_reg_array, TRUE);
+      }
+    }
+  }
+
   switch (stream_type) {
     case ST_VIDEO_MPEG1:
     case ST_VIDEO_MPEG2:
@@ -650,7 +689,8 @@
     case ST_PRIVATE_DATA:
       /* check if there is an AC3 descriptor associated with this stream
        * from the PMT */
-      if (gst_mpeg_descriptor_find (stream->ES_info, DESC_DVB_AC3)) {
+      if (gst_mpeg_descriptor_find (stream->ES_info,
+              DESC_DVB_AC3)) {
         template = klass->audio_template;
         name = g_strdup_printf ("audio_%04x", stream->PID);
         caps = gst_caps_new_simple ("audio/x-ac3", NULL);
@@ -659,7 +699,8 @@
         template = klass->private_template;
         name = g_strdup_printf ("audio_%04x", stream->PID);
         caps = gst_caps_new_simple ("audio/x-eac3", NULL);
-      } else if (gst_mpeg_descriptor_find (stream->ES_info, DESC_DVB_TELETEXT)) {
+      } else if (gst_mpeg_descriptor_find (stream->ES_info,
+              DESC_DVB_TELETEXT)) {
         template = klass->private_template;
         name = g_strdup_printf ("private_%04x", stream->PID);
         caps = gst_caps_new_simple ("private/teletext", NULL);
@@ -711,13 +752,10 @@
       break;
     case ST_PRIVATE_EA:        /* Try to detect a VC1 stream */
     {
-      guint8 *desc = NULL;
-
-      if (stream->ES_info)
-        desc = gst_mpeg_descriptor_find (stream->ES_info, DESC_REGISTRATION);
-      if (!(desc && DESC_REGISTRATION_format_identifier (desc) == DRF_ID_VC1)) {
+      if (!(stream_desc_reg_array &&
+          gst_mpeg_desc_reg_format_id_in_array(stream_desc_reg_array, DRF_ID_VC1))) {
         GST_WARNING ("0xea private stream type found but no descriptor "
-            "for VC1. Assuming plain VC1.");
+                "for VC1. Assuming plain VC1.");
       }
       template = klass->video_template;
       name = g_strdup_printf ("video_%04x", stream->PID);
@@ -727,47 +765,7 @@
           NULL);
       break;
     }
-    case ST_BD_AUDIO_AC3:
-    {
-      GstMpegTSStream *PMT_stream =
-          gst_mpegts_demux_get_stream_for_PID (stream->demux, stream->PMT_pid);
-      GstMPEGDescriptor *program_info = PMT_stream->PMT.program_info;
-      guint8 *desc = NULL;
-
-      if (program_info)
-        desc = gst_mpeg_descriptor_find (program_info, DESC_REGISTRATION);
-
-      if (desc && DESC_REGISTRATION_format_identifier (desc) == DRF_ID_HDMV) {
-        template = klass->audio_template;
-        name = g_strdup_printf ("audio_%04x", stream->PID);
-        caps = gst_caps_new_simple ("audio/x-eac3", NULL);
-      } else if (stream->ES_info && gst_mpeg_descriptor_find (stream->ES_info,
-              DESC_DVB_ENHANCED_AC3)) {
-        template = klass->audio_template;
-        name = g_strdup_printf ("audio_%04x", stream->PID);
-        caps = gst_caps_new_simple ("audio/x-eac3", NULL);
-      } else {
-        if (!stream->ES_info ||
-            !gst_mpeg_descriptor_find (stream->ES_info, DESC_DVB_AC3)) {
-          GST_WARNING ("AC3 stream type found but no corresponding "
-              "descriptor to differentiate between AC3 and EAC3. "
-              "Assuming plain AC3.");
-        }
-        template = klass->audio_template;
-        name = g_strdup_printf ("audio_%04x", stream->PID);
-        caps = gst_caps_new_simple ("audio/x-ac3", NULL);
-      }
-      break;
-    }
-    case ST_BD_AUDIO_EAC3:
-      template = klass->audio_template;
-      name = g_strdup_printf ("audio_%04x", stream->PID);
-      caps = gst_caps_new_simple ("audio/x-eac3", NULL);
-      break;
     case ST_PS_AUDIO_DTS:
-    case ST_BD_AUDIO_DTS:
-    case ST_BD_AUDIO_DTS_HD:
-    case ST_BD_AUDIO_DTS_HD_MASTER_AUDIO:
       template = klass->audio_template;
       name = g_strdup_printf ("audio_%04x", stream->PID);
       caps = gst_caps_new_simple ("audio/x-dts", NULL);
@@ -777,24 +775,52 @@
       name = g_strdup_printf ("audio_%04x", stream->PID);
       caps = gst_caps_new_simple ("audio/x-lpcm", NULL);
       break;
-    case ST_BD_AUDIO_LPCM:
-      template = klass->audio_template;
-      name = g_strdup_printf ("audio_%04x", stream->PID);
-      caps = gst_caps_new_simple ("audio/x-private-ts-lpcm", NULL);
-      break;
     case ST_PS_DVD_SUBPICTURE:
       template = klass->subpicture_template;
       name = g_strdup_printf ("subpicture_%04x", stream->PID);
       caps = gst_caps_new_simple ("video/x-dvd-subpicture", NULL);
       break;
-    case ST_BD_PGS_SUBPICTURE:
-      template = klass->subpicture_template;
-      name = g_strdup_printf ("subpicture_%04x", stream->PID);
-      caps = gst_caps_new_simple ("subpicture/x-pgs", NULL);
-      break;
     default:
       break;
   }
+
+  if (!template && is_hdmv) {
+    switch (stream_type) {
+      case ST_BD_AUDIO_AC3:
+        template = klass->audio_template;
+        name = g_strdup_printf ("audio_%04x", stream->PID);
+        caps = gst_caps_new_simple ("audio/x-ac3", NULL);
+        break;
+      case ST_BD_AUDIO_EAC3:
+        template = klass->audio_template;
+        name = g_strdup_printf ("audio_%04x", stream->PID);
+        caps = gst_caps_new_simple ("audio/x-eac3", NULL);
+        break;
+      case ST_BD_AUDIO_DTS:
+      case ST_BD_AUDIO_DTS_HD:
+      case ST_BD_AUDIO_DTS_HD_MASTER_AUDIO:
+        template = klass->audio_template;
+        name = g_strdup_printf ("audio_%04x", stream->PID);
+        caps = gst_caps_new_simple ("audio/x-dts", NULL);
+        break;
+      case ST_BD_AUDIO_LPCM:
+        template = klass->audio_template;
+        name = g_strdup_printf ("audio_%04x", stream->PID);
+        caps = gst_caps_new_simple ("audio/x-private-ts-lpcm", NULL);
+        break;
+      case ST_BD_PGS_SUBPICTURE:
+        template = klass->subpicture_template;
+        name = g_strdup_printf ("subpicture_%04x", stream->PID);
+        caps = gst_caps_new_simple ("subpicture/x-pgs", NULL);
+        break;
+      default:
+        break;
+    }
+  }
+
+  if (stream_desc_reg_array)
+    g_array_free(stream_desc_reg_array, TRUE);
+
   if (name == NULL || template == NULL || caps == NULL)
     return FALSE;
 
