Index: stblinux-2.6.12/drivers/mtd/nand/Kconfig
===================================================================
--- stblinux-2.6.12.orig/drivers/mtd/nand/Kconfig	2006-10-10 20:27:00.000000000 +0200
+++ stblinux-2.6.12/drivers/mtd/nand/Kconfig	2007-04-25 02:36:25.000000000 +0200
@@ -199,6 +199,10 @@
 	help
 	  Enables access to the Smart Media card interface on the AT91RM9200.
 
+config MTD_NAND_DM8000
+	bool "DM8000 NAND support"
+	depends on MTD_NAND
+
 config MTD_NAND_NANDSIM
 	tristate "Support for NAND Flash Simulator"
 	depends on m && MTD_NAND && MTD_PARTITIONS
Index: stblinux-2.6.12/drivers/mtd/nand/Makefile
===================================================================
--- stblinux-2.6.12.orig/drivers/mtd/nand/Makefile	2006-10-10 20:27:00.000000000 +0200
+++ stblinux-2.6.12/drivers/mtd/nand/Makefile	2007-04-25 02:36:25.000000000 +0200
@@ -16,6 +16,7 @@
 obj-$(CONFIG_MTD_NAND_AU1550)		+= au1550nd.o
 obj-$(CONFIG_MTD_NAND_PPCHAMELEONEVB)	+= ppchameleonevb.o
 obj-$(CONFIG_MTD_NAND_S3C2410)		+= s3c2410.o
+obj-$(CONFIG_MTD_NAND_DM8000)     += dm8000.o
 obj-$(CONFIG_MTD_NAND_DISKONCHIP)	+= diskonchip.o
 obj-$(CONFIG_MTD_NAND_H1900)		+= h1910.o
 obj-$(CONFIG_MTD_NAND_RTC_FROM4)	+= rtc_from4.o
Index: stblinux-2.6.12/drivers/mtd/nand/dm8000.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ stblinux-2.6.12/drivers/mtd/nand/dm8000.c	2007-04-25 16:09:12.000000000 +0200
@@ -0,0 +1,217 @@
+/*
+ *  drivers/mtd/nand/dm8000.c
+ *
+ *  Copyright (C) 2000 Steven J. Hill (sjhill@realitydiluted.com)
+ *
+ *  Modified for Dreambox DM8000 by Felix Domke <tmbinc@elitedvb.net>
+ *
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ *  Overview:
+ *   This is a device driver for the NAND flash device found on the
+ *   DM8000 board.
+ *
+ */
+
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h>
+#include <linux/mtd/partitions.h>
+#include <asm/io.h>
+
+static struct mtd_info *dm8000_mtd = NULL;
+/*
+ * Define partitions for flash device
+ */
+const static struct mtd_partition partition_info[] = {
+	{
+		.name	= "complete",
+		.offset	= 0,
+		.size	= 256*1024*1024
+	},
+	{
+		.name	= "loader",
+		.offset	= 0,
+		.size	= 1024*1024
+	},
+	{
+		.name	= "boot partition",
+		.offset	= 1024*1024,
+		.size	= 3*1024*1024
+	},
+	{
+		.name	= "root partition",
+		.offset	= 4*1024*1024,
+		.size	= 60*1024*1024
+	},
+	{
+		.name	= "home partition",
+		.offset = 64*1024*1024,
+		.size	= 64*1024*1024
+	},
+	{
+		.name	= "unused partition",
+		.offset = 128*1024*1024,
+		.size	= 120*1024*1024
+	},
+	{
+		.name	= "preset partition",
+		.offset = 248*1024*1024,
+		.size	= 8*1024*1024
+	}
+};
+#define NUM_PARTITIONS 7
+
+/*
+ *	hardware specific access to control-lines
+ *  our hardware logic handles the line according to the addresses.
+ */
+static void dm8000_hwcontrol(struct mtd_info *mtd, int cmd)
+{
+	struct nand_chip *this = mtd->priv;
+
+	switch(cmd){
+
+	case NAND_CTL_SETCLE: this->IO_ADDR_W = (void*)0xBF030000; break; // COMMAND
+	case NAND_CTL_CLRCLE: this->IO_ADDR_W = (void*)0xBF030004; break; // DATA
+
+	case NAND_CTL_SETALE: this->IO_ADDR_W = (void*)0xBF030002; break; // ADDRESS
+	case NAND_CTL_CLRALE: this->IO_ADDR_W = (void*)0xBF030004; break; // DATA
+
+	case NAND_CTL_SETNCE: break; // CE will automatically set on command
+	case NAND_CTL_CLRNCE: *(volatile unsigned char*)0xBF030003 = 0; break; // TERM
+	default:
+		BUG();
+	}
+}
+
+static void dm8000_nand_read_buf(struct mtd_info *mtd, u_char *buf, int len)
+{
+//	struct nand_chip *this = mtd->priv;
+
+	*(volatile unsigned char*)0xBF030002;
+
+	while (len > 16)
+	{
+		*(long*)buf = *(volatile long*)(0xBF030004);
+		*(long*)(buf+4) = *(volatile long*)(0xBF030004);
+		*(long*)(buf+8) = *(volatile long*)(0xBF030004);
+		*(long*)(buf+12) = *(volatile long*)(0xBF030004);
+		buf += 16;
+		len -= 16;
+	}
+
+	while (len--)
+		*buf++ = *(volatile unsigned char*)(0xBF030004);
+}
+
+static int dm8000_dev_ready(struct mtd_info *mtd)
+{
+	*(volatile unsigned char*)0xBF030002;
+	return 1;
+}
+
+/*
+ * Main initialization routine
+ */
+int __init dm8000_init (void)
+{
+	struct nand_chip *this;
+	unsigned char probe[4];
+	int i, j;
+
+	/* Allocate memory for MTD device structure and private data */
+	dm8000_mtd = kmalloc (sizeof(struct mtd_info) + sizeof (struct nand_chip),
+				GFP_KERNEL);
+	if (!dm8000_mtd) {
+		printk ("Unable to allocate DM8000 NAND MTD device structure.\n");
+		return -ENOMEM;
+	}
+
+	/* Get pointer to private data */
+	this = (struct nand_chip *) (&dm8000_mtd[1]);
+
+	*(volatile unsigned char*)(0xBF030000) = 0x90;
+	*(volatile unsigned char*)(0xBF030002) = 0;
+	probe[0] = *(volatile unsigned char*)(0xBF030004);
+	probe[1] = *(volatile unsigned char*)(0xBF030004);
+	probe[2] = *(volatile unsigned char*)(0xBF030004);
+	probe[3] = *(volatile unsigned char*)(0xBF030004);
+	*(volatile unsigned char*)(0xBF030003) = 0; // term
+
+	j = jiffies;
+	for (i=0; i<1000*1000/4; ++i)
+		*(volatile unsigned long*)(0xBF030004);
+	printk("%ld kb/s\n", 1000 * HZ / (jiffies-j));
+
+	printk(" - NAND PROBE: %02x %02x %02x %02x\n",
+			probe[0], probe[1], probe[2], probe[3]);
+
+	/* Initialize structures */
+	memset((char *) dm8000_mtd, 0, sizeof(struct mtd_info));
+	memset((char *) this, 0, sizeof(struct nand_chip));
+
+	/* Link the private data with the MTD structure */
+	dm8000_mtd->priv = this;
+
+	/* Set address of NAND IO lines */
+	this->IO_ADDR_R = (void*)0xBF030004;
+	this->IO_ADDR_W = (void*)0xBF030004;
+
+	/* Set address of hardware control function */
+	this->hwcontrol = dm8000_hwcontrol;
+	this->read_buf = dm8000_nand_read_buf;
+	this->dev_ready = 0; // don't use dm8000_dev_ready
+	/* 15 us command delay time */
+	this->chip_delay = 15;
+	this->eccmode = NAND_ECC_SOFT;
+
+	/* Scan to find existence of the device */
+	if (nand_scan (dm8000_mtd, 1)) {
+		kfree (dm8000_mtd);
+		return -ENXIO;
+	}
+
+	/* Allocate memory for internal data buffer */
+	this->data_buf = kmalloc (sizeof(u_char) * (dm8000_mtd->oobblock + dm8000_mtd->oobsize), GFP_KERNEL);
+	if (!this->data_buf) {
+		printk ("Unable to allocate NAND data buffer for Dreambox.\n");
+		kfree (dm8000_mtd);
+		return -ENOMEM;
+	}
+
+	/* Register the partitions */
+	add_mtd_partitions(dm8000_mtd, partition_info, NUM_PARTITIONS);
+
+	/* Return happy */
+	return 0;
+}
+module_init(dm8000_init);
+
+/*
+ * Clean up routine
+ */
+#ifdef MODULE
+static void __exit dm8000_cleanup (void)
+{
+	struct nand_chip *this = (struct nand_chip *) &dm8000_mtd[1];
+
+	/* Unregister the device */
+	del_mtd_device (dm8000_mtd);
+
+	/* Free internal data buffer */
+	kfree (this->data_buf);
+
+	/* Free the MTD device structure */
+	kfree (dm8000_mtd);
+}
+module_exit(dm8000_cleanup);
+#endif
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Felix Domke <tmbinc@elitedvb.net>");
+MODULE_DESCRIPTION("Dream-Multimedia DM8000 NAND flash board glue");
